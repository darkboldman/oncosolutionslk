---
import Layout from '../../layouts/Layout.astro';
import ProductCard from '../../components/ProductCard.astro';
import productsData from '../../data/products.json';

// Slugify function (convert to lowercase, remove non-alphanumerics, replace spaces with hyphens)
function slugify(str: string): string {
  return str.toLowerCase().replace(/\s+/g, '-').replace(/[^\w-]+/g, '');
}

// Helper function to safely get search params with type safety
function getQueryParam(param: string, defaultValue: string = ''): string {
  const value = Astro.url.searchParams.get(param);
  return value !== null ? value : defaultValue;
}

// Extract unique categories
const categories = Array.from(
  new Set(
    productsData
      .filter(product => product.category !== undefined)
      .map(product => product.category as string)
  )
).sort();

// Get current page and category information
const currentCategory = getQueryParam('category', 'all');
const currentPage = parseInt(getQueryParam('page', '1'));

// Filter products based on selected category
let filteredProducts = currentCategory === 'all' 
  ? [...productsData] 
  : productsData.filter(p => p.category && slugify(p.category) === currentCategory);

// Sort products: featured products first, then by name
filteredProducts.sort((a, b) => {
  if (a.featured === "yes" && b.featured !== "yes") return -1;
  if (a.featured !== "yes" && b.featured === "yes") return 1;
  return a.name.localeCompare(b.name);
});

// Set up pagination
const productsPerPage = 12;
const totalProducts = filteredProducts.length;
const totalPages = Math.ceil(totalProducts / productsPerPage);

// Calculate the start and end indices for the current page
const startIndex = (currentPage - 1) * productsPerPage;
const endIndex = Math.min(startIndex + productsPerPage, totalProducts);

// Get products for the current page
const productsForCurrentPage = filteredProducts.slice(startIndex, endIndex);

// Prepare category data for tabs
const categoryTabs = [
  {
    slug: 'all',
    label: 'All',
    image: '/images/all-icon.png',  // Default image for "All" category
  },
  ...categories.map(category => {
    // Find a product from each category to get the image
    const categoryImage = productsData.find(p => p.category === category)?.catImage || '/images/default-category.png';
    
    return {
      slug: slugify(category),
      label: category,
      image: categoryImage,
    };
  })
];

// Generate pagination link with category preservation
function generatePaginationLink(pageNumber: number, category: string): string {
  const baseUrl = '/products';
  let url = baseUrl;
  
  // Add category parameter if not "all"
  if (category !== 'all') {
    url += `?category=${category}`;
  }
  
  // Add page parameter if not page 1 or if we already have a category parameter
  if (pageNumber !== 1) {
    url += category !== 'all' ? `&page=${pageNumber}` : `?page=${pageNumber}`;
  }
  
  return url;
}
---

<Layout title="Products | LED Lighting Solutions">
  <div class="products-container">
    <header class="products-header">
      <h1>Our Products</h1>
      <p>Browse our selection of high-quality LED lighting products</p>
    </header>

    <!-- Category Tabs -->
    <div class="category-tabs">
      {categoryTabs.map(({ slug, label, image }) => (
        <a 
          href={slug === 'all' ? '/products' : `/products?category=${slug}`}
          class={`tab-button ${currentCategory === slug ? 'active-tab' : ''}`}
        >
          <img src={image} alt={label} class="tab-icon" />
          {label}
        </a>
      ))}
    </div>
    
    <!-- Products Grid - Single display area for all products -->
    <div class="products-grid">
      {productsForCurrentPage.length > 0 ? (
        productsForCurrentPage.map(product => (
          <div class="product-item">
            <ProductCard product={product} />
          </div>
        ))
      ) : (
        <div class="no-products">
          <p>No products found in this category.</p>
        </div>
      )}
    </div>

    {/* Pagination - Only show if there are multiple pages */}
    {totalPages > 1 && (
      <div class="pagination">
        {currentPage > 1 && (
          <a href={generatePaginationLink(currentPage - 1, currentCategory)} class="pagination-link prev">
            &larr; Previous
          </a>
        )}
        
        <div class="pagination-numbers">
          {Array.from({ length: totalPages }, (_, i) => i + 1).map(pageNum => (
            <a 
              href={generatePaginationLink(pageNum, currentCategory)} 
              class={`pagination-number ${pageNum === currentPage ? 'active' : ''}`}
            >
              {pageNum}
            </a>
          ))}
        </div>
        
        {currentPage < totalPages && (
          <a href={generatePaginationLink(currentPage + 1, currentCategory)} class="pagination-link next">
            Next &rarr;
          </a>
        )}
      </div>
    )}
  </div>
</Layout>

<style>
  .products-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .products-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .products-header h1 {
    font-size: 2.5rem;
    color: #2d3748;
    margin-bottom: 0.5rem;
  }

  .products-header p {
    font-size: 1.25rem;
    color: #4a5568;
  }

  .products-grid {
    display: grid;
    grid-template-columns: repeat(1, 1fr);
    gap: 2rem;
    min-height: 300px; /* Ensure grid has minimum height even when empty */
  }

  .no-products {
    grid-column: 1 / -1;
    text-align: center;
    padding: 3rem 0;
    color: #718096;
    font-size: 1.25rem;
  }

  @media (min-width: 640px) {
    .products-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (min-width: 1024px) {
    .products-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  .pagination {
    margin-top: 3rem;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
  }

  .pagination-link {
    display: inline-flex;
    padding: 0.5rem 1rem;
    background-color: #e2e8f0;
    color: #4a5568;
    border-radius: 0.375rem;
    text-decoration: none;
    font-weight: 500;
    transition: background-color 0.3s ease;
  }

  .pagination-link:hover {
    background-color: #cbd5e0;
  }

  .pagination-numbers {
    display: flex;
    gap: 0.5rem;
  }

  .pagination-number {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    width: 2.5rem;
    height: 2.5rem;
    background-color: #e2e8f0;
    color: #4a5568;
    border-radius: 0.375rem;
    text-decoration: none;
    font-weight: 500;
    transition: background-color 0.3s ease, color 0.3s ease;
  }

  .pagination-number:hover {
    background-color: #cbd5e0;
  }

  .pagination-number.active {
    background-color: #3182ce;
    color: white;
  }

  .category-tabs {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    overflow-x: auto;
    padding-bottom: 0.5rem;
    margin-bottom: 2rem;
    scroll-snap-type: x mandatory;
    justify-content: center;
  }

  .tab-button {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border: none;
    background-color: #edf2f7;
    color: #2d3748;
    border-radius: 0.375rem;
    font-weight: 500;
    scroll-snap-align: start;
    transition: background-color 0.3s;
    max-width: 200px;
    height: 50px;
    overflow: hidden;
    position: relative;
    text-decoration: none;
    cursor: pointer;
  }

  .tab-icon {
    width: 24px;
    height: 24px;
    object-fit: contain;
  }

  .tab-button:hover {
    background-color: #e2e8f0;
  }

  .tab-button.active-tab {
    background-color: #3182ce;
    color: white;
  }
</style>

<script>
  // Handle initial category and page selection on load
  document.addEventListener('DOMContentLoaded', () => {
    // Get the current category from URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const category = urlParams.get('category') || 'all';
    
    // Highlight the active tab
    const tabButtons = document.querySelectorAll('.tab-button');
    tabButtons.forEach(tab => {
      const href = tab.getAttribute('href') || '';
      if ((category === 'all' && !href.includes('category=')) || 
          (href.includes(`category=${category}`))) {
        tab.classList.add('active-tab');
      } else {
        tab.classList.remove('active-tab');
      }
    });
  });

  // Handle browser back/forward navigation
  window.addEventListener('popstate', () => {
    location.reload();
  });
</script>