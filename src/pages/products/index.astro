---
import Layout from '../../layouts/Layout.astro';
import ProductCard from '../../components/ProductCard.astro';
import productsData from '../../data/products.json';

// Extract unique categories
// Slugify function (convert to lowercase, remove non-alphanumerics, replace spaces with hyphens)
function slugify(str: string) {
  return str.toLowerCase().replace(/\s+/g, '-').replace(/[^\w-]+/g, '');
}

const categories = Array.from(
  new Set(
    productsData
      .filter(product => product.category !== undefined)
      .map(product => product.category)
  )
).sort();

// Group products by category, including "All"
const groupedProducts = [
  {
    slug: 'all',
    label: 'All',
    image: '/images/all-icon.png',  // Default image for "All" category
    products: productsData
  },
  ...categories.map(category => {
    // Find a product from each category to get the image (assuming first product for simplicity)
    const categoryImage = productsData.find(p => p.category === category)?.catImage || '/images/default-category.png';

    return {
      slug: slugify(category),
      label: category,
      image: categoryImage, // Image now fetched from product data
      products: productsData.filter(p => p.category === category)
    };
  })
];




// Sort products: featured products first, then by name
const sortedProducts = [...productsData].sort((a, b) => {
  if (a.featured === "yes" && b.featured !== "yes") return -1;
  if (a.featured !== "yes" && b.featured === "yes") return 1;
  return a.name.localeCompare(b.name);
});

// Get the current page from the URL query parameter
const currentPage = parseInt(Astro.url.searchParams.get('page') || '1');
const productsPerPage = 12;
const totalProducts = sortedProducts.length;
const totalPages = Math.ceil(totalProducts / productsPerPage);

// Calculate the start and end indices for the current page
const startIndex = (currentPage - 1) * productsPerPage;
const endIndex = Math.min(startIndex + productsPerPage, totalProducts);

// Get products for the current page
const productsForCurrentPage = sortedProducts.slice(startIndex, endIndex);

// Generate pagination links
function generatePaginationLink(pageNumber: number) {
  return pageNumber === 1 ? '/products' : `/products?page=${pageNumber}`;
}
---

<Layout title="Products | LED Lighting Solutions">
  <div class="products-container">
    <!-- Category Tabs -->
    <!-- Tabs -->
    <div class="category-tabs">
      {groupedProducts.map(({ slug, label, image }, index) => (
        <span
          role="button"
          tabindex="0"
          class={`tab-button ${index === 0 ? 'active-tab' : ''}`}
          onclick={`showCategory('${slug}')`}
        >
          <img src={image} alt={label} class="tab-icon" />
          {label}
        </span>
      ))}
    </div>
    

    <!-- Panels -->
    {groupedProducts.map(({ slug, products }, index) => (
      <div 
        class="category-panel" 
        id={`panel-${slug}`} 
        style={`display: ${index === 0 ? 'grid' : 'none'}`}
      >
        {products.map(product => (
          <div class="product-item">
            <ProductCard product={product} />
          </div>
        ))}
      </div>
    ))}


    <!-- <header class="products-header">
      <h1>Our Products</h1>
      <p>Browse our selection of high-quality LED lighting products</p>
    </header>
    <div class="category-links">
      {categories.map(category => (
        <a href={`#${category.toLowerCase()}`} class="category-link">
          {category}
        </a>
      ))}
    </div>
    
    <div class="products-grid">
      {productsForCurrentPage.map(product => (
        <div class="product-item">
          <ProductCard product={product} />
        </div>
      ))}
    </div>

    {totalPages > 1 && (
      <div class="pagination">
        {currentPage > 1 && (
          <a href={generatePaginationLink(currentPage - 1)} class="pagination-link prev">
            &larr; Previous
          </a>
        )}
        
        <div class="pagination-numbers">
          {Array.from({ length: totalPages }, (_, i) => i + 1).map(pageNum => (
            <a 
              href={generatePaginationLink(pageNum)} 
              class={`pagination-number ${pageNum === currentPage ? 'active' : ''}`}
            >
              {pageNum}
            </a>
          ))}
        </div>
        
        {currentPage < totalPages && (
          <a href={generatePaginationLink(currentPage + 1)} class="pagination-link next">
            Next &rarr;
          </a>
        )}
      </div>
    )} -->
  </div>
</Layout>

<style>
  .products-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .products-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .products-header h1 {
    font-size: 2.5rem;
    color: #2d3748;
    margin-bottom: 0.5rem;
  }

  .products-header p {
    font-size: 1.25rem;
    color: #4a5568;
  }

  .products-grid {
    display: grid;
    grid-template-columns: repeat(1, 1fr);
    gap: 2rem;
  }

  @media (min-width: 640px) {
    .products-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (min-width: 1024px) {
    .products-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  .pagination {
    margin-top: 3rem;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
  }

  .pagination-link {
    display: inline-flex;
    padding: 0.5rem 1rem;
    background-color: #e2e8f0;
    color: #4a5568;
    border-radius: 0.375rem;
    text-decoration: none;
    font-weight: 500;
    transition: background-color 0.3s ease;
  }

  .pagination-link:hover {
    background-color: #cbd5e0;
  }

  .pagination-numbers {
    display: flex;
    gap: 0.5rem;
  }

  .pagination-number {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    width: 2.5rem;
    height: 2.5rem;
    background-color: #e2e8f0;
    color: #4a5568;
    border-radius: 0.375rem;
    text-decoration: none;
    font-weight: 500;
    transition: background-color 0.3s ease, color 0.3s ease;
  }

  .pagination-number:hover {
    background-color: #cbd5e0;
  }

  .pagination-number.active {
    background-color: #3182ce;
    color: white;
  }

  .category-tabs {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
  justify-content: center;
  margin-bottom: 2rem;
}

.tab-button {
  padding: 0.5rem 1rem;
  border: none;
  background-color: #ffffff;
  border-radius: 0.375rem;
  cursor: pointer;
  font-weight: 500;
}

.tab-button:hover {
  background-color: #ffffff;
}

.tab-button.active-tab {
  background-color: #3182ce;
  color: white;
}

.category-panel {
  display: grid;
  grid-template-columns: repeat(1, 1fr);
  gap: 2rem;
}
.category-tabs {
  display: flex;
  gap: 0.5rem;
  overflow-x: auto;
  padding-bottom: 0.5rem;
  margin-bottom: 2rem;
  scroll-snap-type: x mandatory;
}

.tab-button {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  padding: 0.5rem 1rem;
  border: none;
  background-color: #edf2f7;
  color: #2d3748;
  border-radius: 0.375rem;
  font-weight: 500;
  scroll-snap-align: start;
  transition: background-color 0.3s;
  max-width: 200px;  /* Set a maximum width for the tile */
  height: 50px; /* Set height for the tile */
  overflow: hidden; /* Hide any overflow */
  position: relative;
}

.tab-icon {
  width: 24px;  /* Set width of the image */
  height: 24px; /* Set height of the image */
  object-fit: contain; /* Ensure the image fits inside the container */
}

.tab-button:hover {
  background-color: #e2e8f0;
}

.tab-button.active-tab {
  background-color: #3182ce;
  color: white;
}


@media (min-width: 640px) {
  .category-panel {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (min-width: 1024px) {
  .category-panel {
    grid-template-columns: repeat(3, 1fr);
  }
}

</style>

<script type="text/javascript">
  function showCategory(slug) {
    const panels = document.querySelectorAll('.category-panel');
    const tabs = document.querySelectorAll('.tab-button');

    panels.forEach(panel => {
      panel.style.display = panel.id === `panel-${slug}` ? 'grid' : 'none';
    });

    tabs.forEach(tab => {
      const isActive = tab.getAttribute('onclick')?.includes(slug);
      tab.classList.toggle('active-tab', isActive);
      if (isActive) {
        tab.scrollIntoView({
          behavior: 'smooth',
          inline: 'center',
          block: 'nearest' // ← prevents vertical scroll
        });
      }
    });


    // Update URL hash
    history.replaceState(null, '', `#${slug}`);
  }

  window.addEventListener('DOMContentLoaded', () => {
    const hash = decodeURIComponent(location.hash.replace('#', ''));
    const validPanel = document.getElementById(`panel-${hash}`);
    if (validPanel) {
      showCategory(hash);
    } else {
      showCategory('all');
    }
  });
</script>


